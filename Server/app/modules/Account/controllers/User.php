<?php

use cloudwise\tsb\datasource\services\user\Provider;
use cloudwise\tsb\business\account\User;
use cloudwise\tsb\datasource\helper\DESHelper;
use cloudwise\tsb\datasource\constants\ErrorCodeEnum;
use App\library\Service\ConfigService;

/**
 * Class UserController
 */
class UserController extends BaseController
{
    /**
     * @var Provider
     */
    public $userProvider;

    /**
     * @var \cloudwise\tsb\datasource\base\CacheService
     */
    public $cache;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->userProvider = $this->provider->getUserProvider();
        $this->cache        = $this->provider->getMainProvider()->getCacheService();
    }

    /**
     * 执行登录的方法
     */
    public function loginAction()
    {
        $this->params['email'] = DESHelper::instance()->AesDecode($this->params['token'], $this->params['email']);
        $this->params['pw']    = DESHelper::instance()->AesDecode($this->params['token'], $this->params['pw']);
        if (ConfigService::instance()->getConfig('app.privatizationRegionSwitch')) {
            $return = User::instance()->loginByLocal($this->params['email'], $this->params['pw']);
        } else {
            $return = User::instance()->loginByPublic($this->params['email'], $this->params['pw']);
        }

        $this->rest->checkReturn($return);
    }

    /**
     * 获取登录签名
     */
    public function getLoginTicketAction()
    {
        $this->rest->checkReturn(User::instance()->getLoginTicket($this->params['accessToken']));
    }

    /**
     * 使用签名登录
     */
    public function loginByTicketAction()
    {
        $this->rest->checkReturn(User::instance()->loginByTicket($this->params['ticket']));
    }

    /**
     * 退出
     */
    public function logoutAction()
    {
        $result     = User::instance()->logout();
        $domainName = ConfigService::instance()->getConfig('domain.domainName');
        $this->redirect($domainName . '/#/login');
    }

    public function getRegisterGeeInitAction()
    {
        $data = User::instance()->getRegisterGeeInit($this->params);
        $this->rest->success($data);
    }


    /**
     * 用户注册
     */
    public function registerAction()
    {
        if (ConfigService::instance()->getConfig('app.privatizationRegionSwitch')) {
            $return = User::instance()->registerLocal($this->params);
        } else {
            $return = User::instance()->registerPublic($this->params);
        }
        $this->rest->checkReturn($return);
    }

    /**
     * 激活用户
     */
    public function activateAction()
    {
        $cache = $this->cache->get($this->params['token']);
        if (!$cache) {
            return [
                'code' => ErrorCodeEnum::STATUS_ERROR_USER_CACHE_EXPIRE,
                'msg'  => '缓存已过期',
            ];
        }
        $return = User::instance()->activateUser($cache['accessToken'], $cache['email']);
        $this->rest->checkReturn($return);
    }

    /**
     * 从cwop迁移用户信息
     */
    public function registerFromCwopAction()
    {
        $sAccessToken = $this->params['accessToken'];
        $result       = User::instance()->registerFromCwop($sAccessToken);
        $this->rest->checkReturn($result);
    }

    /**
     * 重置邮箱发送邮件
     */
    public function sendResetEmailAction()
    {
        $token            = \cloudwise\tsb\datasource\helper\StringHelper::mkRandomChar(4, 2);
        $token            = md5($token);
        $checkEmailResult = \Cwop::validateEmailExists($this->params['email']);
        if ($checkEmailResult['data']['isExistsEmail']) {
            $this->rest->checkError(['msg' => '邮箱已被占用', 'code' => ErrorCodeEnum::STATUS_ERROR_USER_EMAIL_EXISTS]);
        }
        $cache = [
            'old_email'    => User::instance()->getUserCache()->user_email,
            'new_email'    => $this->params['email'],
            'access_token' => User::instance()->getUserCache()->access_token,
        ];
        $this->cache->set($token, $cache, 10);
        $template = $this->render('resetEmail', ['token' => $token, 'name' => User::instance()->getUserCache()->user_name]);
        $count    = App\library\Service\MailService::instance()->sendMail('TSB.service', [$this->params['email']], $template);
        if ($count) {
            $this->rest->checkReturn(['msg' => '重置邮件发送成功',]);
        } else {
            $this->rest->checkReturn(
                ['msg' => '重置邮件发送失败', 'code' => ErrorCodeEnum::STATUS_ERROR_USER_EMAIL_SEND_ERROR]);
        }
    }

    public function sendResetPwdEmailAction()
    {
        $checkEmailResult = \Cwop::validateEmailExists($this->params['email']);
        if (!$checkEmailResult['data']['isExistsEmail']) {
            $this->rest->checkError(['msg' => '邮箱不存在', 'code' => ErrorCodeEnum::STATUS_ERROR_API_PARAMS_INVALID]);
        }
        $token            = \cloudwise\tsb\datasource\helper\StringHelper::mkRandomChar(4, 2);
        $cache = [
            'email'    => $this->params['email'],
        ];
        $this->cache->set($token, $cache, 10);
        $template = $this->render('resetEmail', ['token' => $token, 'name' => User::instance()->getUserCache()->user_name]);
        $count    = App\library\Service\MailService::instance()->sendMail('TSB.service', [$this->params['email']], $template);
        if ($count) {
            $this->rest->checkReturn(['msg' => '重置邮件发送成功',]);
        } else {
            $this->rest->checkReturn(['msg' => '重置邮件发送失败', 'code' => ErrorCodeEnum::STATUS_ERROR_USER_EMAIL_SEND_ERROR]);
        }
    }

    public function confirmResetPwdAction()
    {
        $cache = $this->cache->get($this->params['token']);

        $this->cache->del($this->params['token']);

        if (!$cache) {
            $this->rest->checkReturn([
                'code' => ErrorCodeEnum::STATUS_ERROR_USER_CACHE_EXPIRE,
                'msg'  => '缓存已过期',
            ]);
        }

        if($this->params['pw'] != $this->params['pw_repeat']){
            return [
                'code' => ErrorCodeEnum::STATUS_PWD_NEW_OLD_DIFFERENT,
                'msg'  => '密码不相同',
            ];
        }

        $result = \Cwop::resetPwd($cache['email'], '', '', '', $this->params['pw']);
        unset($result['data']);
        $this->rest->checkReturn($result);
    }

    /**
     * 重置邮箱
     */
    public function resetEmailAction()
    {
        $cache = $this->cache->get($this->params['token']);
        if (!$cache) {
            $return = [
                'code' => ErrorCodeEnum::STATUS_ERROR_USER_CACHE_EXPIRE,
                'msg'  => '缓存已过期',
            ];
            $this->rest->checkReturn($return);
        }

        $this->rest->checkReturn(
            User::instance()->resetEmail($cache['old_email'], $cache['new_email'], $cache['access_token']));
    }

    /**
     * 重置手机号的验证码发送
     */
    public function sendResetMobileCodeAction()
    {
        $checkEmailResult = \Cwop::validateMobileExists($this->params['mobile']);
        if ($checkEmailResult['data']['isExistsMobile']) {
            $this->rest->checkError(['msg' => '手机号已被占用', 'code' => ErrorCodeEnum::STATUS_ERROR_USER_MOBILE_EXISTS]);
        }
        $return = User::instance()->sendValidateCode($this->params['mobile']);
        $this->rest->checkError($return);
        $token = $return['data'];
        $cache = [
            'old_mobile'   => User::instance()->getUserCache()->user_mobile,
            'new_mobile'   => $this->params['mobile'],
            'access_token' => User::instance()->getUserCache()->access_token,
        ];
        $this->cache->set($token, $cache, 1);
        $this->rest->checkReturn(['msg' => '验证码发送成功', 'data' => $token]);
    }

    /**
     * 重置手机号
     */
    public function resetMobileAction()
    {
        $cache = $this->cache->get($this->params['token']);

        $this->cache->del($this->params['token']);

        if (!$cache) {
            $this->rest->checkError(
                [
                    'code' => ErrorCodeEnum::STATUS_ERROR_USER_CACHE_EXPIRE,
                    'msg'  => '缓存已过期,请重新操作',
                ]);
        }
        $this->rest->checkReturn(
            User::instance()->resetMobile($cache['old_mobile'], $cache['new_mobile'], $cache['access_token']));
    }

    /**
     * 更新用户信息
     */
    public function updateUserInfoAction()
    {
        $mUserInfo                            = $this->userProvider->getUserInfo();
        $this->params['user_id']              = User::instance()->getUserCache()->user_id;
        $this->params[$this->params['field']] = $this->params['value'];
        $mUserInfo->Bind($this->params);
        if ($mUserInfo->selfUpdate($this->params['field'])) {
            $this->rest->checkReturn(['msg' => '更新成功']);
        } else {
            $this->rest->checkReturn(['msg' => '更新']);
        }
    }

    /**
     * 重置密码
     */
    public function resetPwdAction()
    {
        if ($this->params['new'] != $this->params['repeat']) {
            $this->rest->checkReturn(
                [
                    'msg'  => '新旧密码不相同',
                    'code' => ErrorCodeEnum::STATUS_PWD_NEW_OLD_DIFFERENT,
                ]);
        }

        $this->rest->checkReturn(User::instance()->resetPwd($this->params));
    }

    public function getGroupListAction()
    {
        $data = User::instance()->getGroupList($this->params);
        $this->rest->success($data);
    }

    public function getUserListAction()
    {
        $data = User::instance()->getUserList($this->params);
        $this->rest->success($data);
    }

    public function addOrUpdateGroupAction()
    {
        $data = User::instance()->addOrUpdateGroup($this->params);
        $this->rest->checkReturn($data);
    }

    public function removeGroupAction()
    {
        $data = User::instance()->removeGroup($this->params);
        $this->rest->checkReturn($data);
    }

    public function getGroupItemAction()
    {
        $data = User::instance()->getGroupItem($this->params);
        $this->rest->checkReturn($data);
    }

    public function updateGroupUserAction()
    {
        $data = User::instance()->updateGroupUser($this->params);
        $this->rest->checkReturn($data);
    }

    public function addGroupUserAction()
    {
        $data = User::instance()->addGroupUser($this->params);
        $this->rest->checkReturn($data);
    }

    //个人中心接口
    public function getUserInfoAction()
    {
        $data = User::instance()->getUserInfo();

        $this->rest->success($data);
    }

    public function getQuotaLeftAction()
    {
        $data = User::instance()->getQuotaLeft($this->params);
        $this->rest->success($data);
    }

    public function getMoudleOverTimeAction()
    {
        $data = User::instance()->getMoudleOverTime($this->params);
        $this->rest->success($data);
    }

    public function getMoudleQuotaAction()
    {
        $data = User::instance()->getMoudleQuota($this->params);
        $this->rest->success($data);
    }

    // 插件管理面板
    public function getPluginPanelListAction()
    {
        $data = User::instance()->getPluginPanelList($this->params);
        $this->rest->success($data);
    }

    public function getApiSecretKeyAction()
    {
        $data = User::instance()->getApiSecretKey($this->params);
        $this->rest->success($data);
    }


    public function changeApiSecretAction()
    {
        $data = User::instance()->changeApiSecret($this->params);
        $this->rest->success($data);
    }

    public function saveApiSecretAction()
    {
        $data = User::instance()->saveApiSecret($this->params);
        $this->rest->success($data);
    }

    public function ModifyUserNameAction()
    {
        $data = User::instance()->ModifyUserName($this->params);
        $this->rest->success($data);
    }

    public function getPluginListAction()
    {
        $data = User::instance()->getPluginList($this->params);
        $this->rest->success($data);
    }

}