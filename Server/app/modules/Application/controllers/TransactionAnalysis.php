<?php
use cloudwise\tsb\business\app\web\TransactionAnalysis;
use cloudwise\tsb\datasource\constants\AppEnum;
use cloudwise\tsb\datasource\constants\TimeRangeEnum;
use cloudwise\tsb\business\app\web\Setting;
/**
 * Created by PhpStorm.
 * User: napple
 * Date: 17/11/14
 * Time: 下午5:53
 */
class TransactionAnalysisController extends BaseController
{
    /**
     * @var \cloudwise\tsb\datasource\services\app\es\TransactionAnalysisService
     */
    private $sTransaction;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->sTransaction = $this->provider->getAppProvider()->getTransactionAnalysisService();
    }

    /**
     * 设置慢参数
     */
    public function setSlowParams()
    {
        $aBasicSetting = Setting::instance()->getAppSetting($this->params);
        $this->params['slow'] = $aBasicSetting[AppEnum::SETTING_BASIC][AppEnum::SETTING_BASIC_SLOW];
        $this->params['very_slow'] = $aBasicSetting[AppEnum::SETTING_BASIC][AppEnum::SETTING_BASIC_VERY_SLOW];
    }

    /**
     * 设置时间范围参数
     * @return array
     */
    public function setRequestTime()
    {
        //获取请求时间
        $request_time = $this->sTransaction->getRequestTime($this->params);
        if(!$request_time){
            return [];
        }
        //设置请求时间范围
        $time_range = AppEnum::getAppTrackTimeRange();
        $this->params['start_time'] = $request_time - $time_range;
        $this->params['end_time'] = $request_time + $time_range;
    }

    /**
     * 将柱状图索引转化为时间区间
     * @param $start_time
     * @param $end_time
     * @param $index
     */
    public function setIndexTime($start_time, $end_time, $index)
    {
        $interval = TimeRangeEnum::getFactsInterval($start_time, $end_time, true);
        $this->params['start_time'] = $start_time + $index * $interval;
        $this->params['end_time'] = $start_time + ($index + 1) * $interval;
    }

    /**
     * 概览-响应时间与吞吐率趋势图
     */
    public function getOverviewRespAndRpmTrendChartAction()
    {
        $this->setSlowParams();
        $data = TransactionAnalysis::instance()->getOverviewRespAndRpmTrendChart($this->params);
        $this->rest->success($data);
    }

    /**
     * 概览-请求数分布饼图
     */
    public function getOverviewRequestDistributionPieAction()
    {
        $this->setSlowParams();
        $data = TransactionAnalysis::instance()->getOverviewRequestDistributionPie($this->params);
        $this->rest->success($data);
    }

    /**
     * 概览-uri列表
     */
    public function getOverviewTransactionListAction()
    {
        $this->setSlowParams();
        $data = TransactionAnalysis::instance()->getOverviewTransactionList($this->params);
        $this->rest->success($data);
    }

    /**
     * 概览-趋势图弹窗列表
     */
    public function getOverviewTransactionPopListAction()
    {
        $this->setSlowParams();
        switch($this->params['type']){
            case 'normal':
                $this->params['search_to'] = $this->params['slow'];
                $this->params['error'] = 0;
                break;
            case 'slow':
                $this->params['search_from'] = $this->params['slow'];
                $this->params['search_to'] = $this->params['very_slow'];
                $this->params['error'] = 0;
                break;
            case 'very_slow':
                $this->params['search_from'] = $this->params['very_slow'];
                $this->params['error'] = 0;
                break;
            case 'error':
                $this->params['error'] = 1;
                break;
        }
        $this->setIndexTime($this->params['start_time'], $this->params['end_time'], $this->params['index']);
        $data = TransactionAnalysis::instance()->getOverviewTransactionPopList($this->params);
        $data['time_from'] = date('Y-m-d H:i:s', $this->params['start_time'] / 1000);
        $data['time_to'] = date('Y-m-d H:i:s', $this->params['end_time'] / 1000);
        $this->rest->success($data);
    }

    /**
     * 仪表盘-最慢方法
     */
    public function getDashboardTopMethodsAction()
    {
        $data = $this->sTransaction->getDashboardTopMethods($this->params);
        $this->rest->success($data);
    }

    /**
     * 仪表盘-方法统计
     */
    public function getDashboardStatisticalIndicatorsAction()
    {
        $data = TransactionAnalysis::instance()->getDashboardStatisticalIndicators($this->params);
        $this->rest->success($data);
    }

    /**
     * 仪表盘-时间与吞吐率趋势图
     */
    public function getDashboardRespAndRpmTrendChartAction()
    {
        $this->setSlowParams();
        $data = TransactionAnalysis::instance()->getOverviewRespAndRpmTrendChart($this->params);
        $this->rest->success($data);
    }

    /**
     * 仪表盘-请求数统计
     */
    public function getDashboardRequestStatisticsAction()
    {
        $this->setSlowParams();
        $data = TransactionAnalysis::instance()->getDashboardRequestStatistics($this->params);
        $this->rest->success($data);
    }

    /*
     * 仪表盘-错误列表
     */
    public function getDashboardErrorInfoListAction()
    {
        $data = TransactionAnalysis::instance()->getDashboardErrorInfoList($this->params);
        $this->rest->success($data);
    }

    /**
     * 仪表盘-异常列表
     */
    public function getDashboardExceptionTop5ListAction()
    {
        $data = TransactionAnalysis::instance()->getDashboardExceptionTop5List($this->params);
        $this->rest->success($data);
    }

    /**
     * 慢请求-时间分布
     */
    public function getSlowAnalysisTimeDistributionLineAction()
    {
        $data = TransactionAnalysis::instance()->getSlowAnalysisTimeDistributionLine($this->params);
        $this->rest->success($data);
    }

    /**
     * 慢请求-快照列表
     */
    public function getSlowAnalysisSnapListAction()
    {
        $this->setSlowParams();
        $data = TransactionAnalysis::instance()->getAnalysisSnapList($this->params);
        $this->rest->success($data);
    }

    /**
     * 错误分析-错误异常数趋势图
     */
    public function getErrorAnalysisErrorExceptionCountChartAction()
    {
        $data = TransactionAnalysis::instance()->getErrorAnalysisErrorExceptionCountChart($this->params);
        $this->rest->success($data);
    }

    /**
     * 错误分析-错误类型占比
     */
    public function getErrorAnalysisErrorRatePieAction()
    {
        $data = TransactionAnalysis::instance()->getErrorAnalysisErrorRatePie($this->params);
        $this->rest->success($data);
    }

    /**
     * 错误分析-异常类型占比
     */
    public function getErrorAnalysisExceptionRatePieAction()
    {
        $data = TransactionAnalysis::instance()->getErrorAnalysisExceptionRatePie($this->params);
        $this->rest->success($data);
    }

    /**
     * 错误分析-快照列表
     */
    public function getErrorAnalysisSnapListAction()
    {
        $this->params['error'] = 1;
        $this->params['exception'] = 1;
        $this->params['error_or_exception'] = ['error', 'exception'];
        $data = TransactionAnalysis::instance()->getAnalysisSnapList($this->params);
        $this->rest->success($data);
    }

    /**
     * 快照分析-响应时间分布图
     */
    public function getSnapAnalysisTimeDistributionLineAction()
    {
        $data = TransactionAnalysis::instance()->getSlowAnalysisTimeDistributionLine($this->params);
        $this->rest->success($data);
    }

    /**
     * 快照分析-快照列表
     */
    public function getSnapAnalysisSnapListAction()
    {
        $data = TransactionAnalysis::instance()->getAnalysisSnapList($this->params);
        $this->rest->success($data);
    }

    /**
     * 快照分析-快照过滤
     */
    public function getSnapAnalysisSnapFilterAction()
    {
        $data = TransactionAnalysis::instance()->getSnapAnalysisSnapFilter($this->params);
        $this->rest->success($data);
    }

    /**
     * 单次追踪-拓扑图
     */
    public function getSingleTopoDataAction()
    {
        //获取请求时间
        $this->setRequestTime();
        $data = TransactionAnalysis::instance()->getSingleTopoData($this->params);
        $this->rest->success($data);
    }

    /**
     * 单次追踪-详情
     */
    public function getSingleDetailDataAction()
    {
        $data = TransactionAnalysis::instance()->getSingleDetailData($this->params);
        $this->rest->success($data);
    }

    /**
     * 单次追踪-调用列表
     */
    public function getSingleCalledApiSnapTopoAction()
    {
        $this->setRequestTime();
        $this->params['app_from'] = (array)$this->params['app_from'];
        $data = TransactionAnalysis::instance()->getSingleCalledApiSnapTopo($this->params);
        $this->rest->success($data);
    }
}